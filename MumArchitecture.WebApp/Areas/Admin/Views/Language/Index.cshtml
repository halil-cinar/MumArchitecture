@model List<string>

@{
    ViewData["Title"] = Lang.Value("Language Management");
}

<style>
    .table-bordered {
        background-color: white;
    }
    
    .save-button {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1000;
        padding: 10px 20px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }

    .translate-button {
        position: fixed;
        bottom: 20px;
        right: 180px;
        z-index: 1000;
        padding: 10px 20px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        display: none;
    }

    .loading-mask {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid #3498db;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .loading-text {
        color: white;
        margin-top: 10px;
        font-size: 18px;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

<div class="loading-mask" id="loadingMask">
    <div class="text-center">
        <div class="loading-spinner"></div>
        <div class="loading-text" id="loadingText">@Lang.Value("Processing...")</div>
    </div>
</div>

<div class="container mt-4">
    <h2>@Lang.Value("Language Management")</h2>

    <ul class="nav nav-tabs" id="languageTabs" role="tablist">
        @for (int i = 0; i < Model.Count; i++)
        {
            <li class="nav-item" role="presentation">
                <button class="nav-link @(i == 0 ? "active" : "")" 
                        id="@Model[i]-tab" 
                        data-bs-toggle="tab" 
                        data-bs-target="#@Model[i]" 
                        type="button" 
                        role="tab" 
                        aria-controls="@Model[i]" 
                        aria-selected="@(i == 0 ? "true" : "false")"
                        onclick="handleTabChange('@Model[i]')">
                    @Model[i].ToUpper()
                </button>
            </li>
        }
    </ul>

    <div class="tab-content" id="languageTabsContent">
        @for (int i = 0; i < Model.Count; i++)
        {
            <div class="tab-pane fade @(i == 0 ? "show active" : "")" 
                 id="@Model[i]" 
                 role="tabpanel" 
                 aria-labelledby="@Model[i]-tab">
                <div class="mt-3">
                    <div class="table-responsive">
                        <table class="table table-bordered" id="table-@Model[i]">
                            <thead>
                                <tr>
                                    <th>@Lang.Value("Key")</th>
                                    <th>@Lang.Value("Value")</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Data will be loaded dynamically -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<button class="btn btn-warning translate-button" onclick="translateCurrentLanguage()">@Lang.Value("Translate from Turkish")</button>
<button class="btn btn-primary save-button" onclick="saveChanges(getCurrentLanguage())">@Lang.Value("Save Changes")</button>

@section Scripts {
    <script>
        // Store localized strings
        const localizedStrings = {
            cannotTranslateTurkish: '@Html.Raw(Json.Serialize(Lang.Value("Cannot translate Turkish to Turkish!")))',
            confirmTranslate: '@Html.Raw(Json.Serialize(Lang.Value("Are you sure you want to translate all values from Turkish to")))',
            translating: '@Html.Raw(Json.Serialize(Lang.Value("Translating...")))',
            translationSuccess: '@Html.Raw(Json.Serialize(Lang.Value("Translation completed successfully!")))',
            translationError: '@Html.Raw(Json.Serialize(Lang.Value("Error during translation:")))',
            saving: '@Html.Raw(Json.Serialize(Lang.Value("Saving...")))',
            saveSuccess: '@Html.Raw(Json.Serialize(Lang.Value("Changes saved successfully!")))',
            saveError: '@Html.Raw(Json.Serialize(Lang.Value("Error saving changes!")))',
            processing: '@Html.Raw(Json.Serialize(Lang.Value("Processing...")))'
        };

        function showLoading(text) {
            $('#loadingText').text(text);
            $('#loadingMask').css('display', 'flex');
        }

        function hideLoading() {
            $('#loadingMask').css('display', 'none');
        }

        function handleTabChange(lang) {
            if (lang === 'tr') {
                $('.translate-button').hide();
            } else {
                $('.translate-button').show();
            }
        }

        $(document).ready(function() {
            // Initial tab state
            handleTabChange(getCurrentLanguage());
            
            // Load data for each language tab
            @foreach (var lang in Model)
            {
                <text>
                loadLanguageData('@lang');
                </text>
            }
        });

        function getCurrentLanguage() {
            return $('.nav-link.active').attr('id')?.replace('-tab', '');
        }

        function loadLanguageData(lang) {
            $.get('/Language/GetLanguageValues?lang=' + lang, function(data) {
                var tbody = $('#table-' + lang + ' tbody');
                tbody.empty();
                
                data.forEach(function(item) {
                    var row = $('<tr>');
                    row.append($('<td>').text(item.key));
                    row.append($('<td>').html('<input type="text" class="form-control" value="' + (item.value || '') + '" data-key="' + item.key + '">'));
                    tbody.append(row);
                });
            });
        }

        function translateCurrentLanguage() {
            var currentLang = getCurrentLanguage();
            if (currentLang === 'tr') {
                alert(localizedStrings.cannotTranslateTurkish);
                return;
            }

            if (confirm(localizedStrings.confirmTranslate + ' ' + currentLang.toUpperCase() + '?')) {
                showLoading(localizedStrings.translating);
                $.ajax({
                    url: '/Language/TranslateToLanguage?lang=' + currentLang,
                    type: 'POST',
                    success: function() {
                        alert(localizedStrings.translationSuccess);
                        loadLanguageData(currentLang);
                        hideLoading();
                    },
                    error: function(xhr) {
                        alert(localizedStrings.translationError + ' ' + xhr.responseText);
                        hideLoading();
                    }
                });
            }
        }

        function saveChanges(lang) {
            showLoading(localizedStrings.saving);
            var values = [];
            $('#table-' + lang + ' tbody tr').each(function() {
                var row = $(this);
                var key = row.find('td:first').text();
                var value = row.find('input').val();
                values.push({ key: key, value: value });
            });

            $.ajax({
                url: '/Language/SaveLanguageValues?lang=' + lang,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(values),
                success: function() {
                    alert(localizedStrings.saveSuccess);
                    hideLoading();
                },
                error: function() {
                    alert(localizedStrings.saveError);
                    hideLoading();
                }
            });
        }
    </script>
} 